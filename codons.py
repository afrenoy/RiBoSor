
NonSynonymousCodons = {
        'TTC': ['TAT','TAC','TGG','TGG','ATC','ATA','ATT','TTG','TTA','CTC','CTG', 'CTA','CTT'],
        'TTT': ['TAT','TAC','TGG','TGG','ATC','ATA','ATT','TTG','TTA','CTC','CTG', 'CTA','CTT'],
        'TTG': ['ATC','ATA','ATT','ATG','GTC','GTA','GTG', 'GTT','TTT','TTC'],
        'TTA': ['ATC','ATA','ATT','ATG','GTC','GTA','GTG', 'GTT','TTT','TTC'],
        'CTT': ['ATC','ATA','ATT','ATG','GTC','GTA','GTG', 'GTT','TTT','TTC'],
        'CTC': ['ATC','ATA','ATT','ATG','GTC','GTA','GTG', 'GTT','TTT','TTC'],
        'CTA': ['ATC','ATA','ATT','ATG','GTC','GTA','GTG', 'GTT','TTT','TTC'],
        'CTG': ['ATC','ATA','ATT','ATG','GTC','GTA','GTG', 'GTT','TTT','TTC'],
        'ATT': ['GTC','GTA','GTG', 'GTT','TTG','TTA','CTC','CTG', 'CTA','CTT','TTT','TTC','TGT','TGC'],
        'ATC': ['GTC','GTA','GTG', 'GTT','TTG','TTA','CTC','CTG', 'CTA','CTT','TTT','TTC','TGT','TGC'],
        'ATA': ['GTC','GTA','GTG', 'GTT','TTG','TTA','CTC','CTG', 'CTA','CTT','TTT','TTC','TGT','TGC'],
        'ATG': ['GTC','GTA','GTG', 'GTT','TTG','TTA','CTC','CTG', 'CTA','CTT','TTT','TTC','TGT','TGC'],
        'GTT': ['ATC','ATA','ATT','TTG','TTA','CTC','CTG', 'CTA','CTT','ATG','GCT','GCC','GCA','GCG'],
        'GTC': ['ATC','ATA','ATT','TTG','TTA','CTC','CTG', 'CTA','CTT','ATG','GCT','GCC','GCA','GCG'],
        'GTA': ['ATC','ATA','ATT','TTG','TTA','CTC','CTG', 'CTA','CTT','ATG','GCT','GCC','GCA','GCG'],
        'GTG': ['ATC','ATA','ATT','TTG','TTA','CTC','CTG', 'CTA','CTT','ATG','GCT','GCC','GCA','GCG'],
        'TCT': ['ACC','ACT','ACA','ACG', 'GCT','GCC','GCA','GCG','AAC','AAT','GAC','GAT'],
        'TCC': ['ACC','ACT','ACA','ACG', 'GCT','GCC','GCA','GCG','AAC','AAT','GAC','GAT'],
        'TCA': ['ACC','ACT','ACA','ACG', 'GCT','GCC','GCA','GCG','AAC','AAT','GAC','GAT'],
        'TCG': ['ACC','ACT','ACA','ACG', 'GCT','GCC','GCA','GCG','AAC','AAT','GAC','GAT'],
        'CCT': ['GCT','GCC','GCA','GCG','GAC','GAT','CAG','CAA','GAA','GAG'],
        'CCC': ['GCT','GCC','GCA','GCG','GAC','GAT','CAG','CAA','GAA','GAG'],
        'CCA': ['GCT','GCC','GCA','GCG','GAC','GAT','CAG','CAA','GAA','GAG'],
        'CCG': ['GCT','GCC','GCA','GCG','GAC','GAT','CAG','CAA','GAA','GAG'],
        'ACT': ['TCT','TCA','TCG', 'TCC', 'AGT', 'AGG','GTC','GTA','GTG', 'GTT','GAA','GAG','GGG','GGC','GGA','GGT'],
        'ACC': ['TCT','TCA','TCG', 'TCC', 'AGT', 'AGG','GTC','GTA','GTG', 'GTT','GAA','GAG','GGG','GGC','GGA','GGT'],
        'ACA': ['TCT','TCA','TCG', 'TCC', 'AGT', 'AGG','GTC','GTA','GTG', 'GTT','GAA','GAG','GGG','GGC','GGA','GGT'],
        'ACG': ['TCT','TCA','TCG', 'TCC', 'AGT', 'AGG','GTC','GTA','GTG', 'GTT','GAA','GAG','GGG','GGC','GGA','GGT'],
        'GCT': ['GTC','GTA','GTG', 'GTT','GGG','GGC','GGA','GGT','TGT','TGC','ACC','ACT','ACA','ACG'],
        'GCC': ['GTC','GTA','GTG', 'GTT','GGG','GGC','GGA','GGT','TGT','TGC','ACC','ACT','ACA','ACG'],
        'GCA': ['GTC','GTA','GTG', 'GTT','GGG','GGC','GGA','GGT','TGT','TGC','ACC','ACT','ACA','ACG'],
        'GCG': ['GTC','GTA','GTG', 'GTT','GGG','GGC','GGA','GGT','TGT','TGC','ACC','ACT','ACA','ACG'],
        'TAT': ['TGG','TGG','ATG','TTG','TTA','CTC','CTG', 'CTA','CTT','ATC','ATA','ATT'],
        'TAC': ['TGG','TGG','ATG','TTG','TTA','CTC','CTG', 'CTA','CTT','ATC','ATA','ATT'],
        'CAT': ['TAT','TAC','AGG','CGC','CGA','CGT','AGA','CGC','AAC','AAT','GAA','GAG'],
        'CAC': ['TAT','TAC','AGG','CGC','CGA','CGT','AGA','CGC','AAC','AAT','GAA','GAG'],
        'CAA': ['AGG','CGC','CGA','CGT','AGA','CGC','AAC','AAT','GAC','GAT','CAT','CAC'],
        'CAG': ['AGG','CGC','CGA','CGT','AGA','CGC','AAC','AAT','GAC','GAT','CAT','CAC'],
        'AAT': ['TCT','TCA','TCG', 'TCC', 'AGT', 'AGG','CAT','CAC','GAA','GAG','GGG','GGC','GGA','GGT'],
        'AAC': ['TCT','TCA','TCG', 'TCC', 'AGT', 'AGG','CAT','CAC','GAA','GAG','GGG','GGC','GGA','GGT'],
        'AAA': ['AGG','CGC','CGA','CGT','AGA','CGC','GAA','GAG','CAG','CAA','TCT','TCA','TCG', 'TCC', 'AGT', 'AGG'],
        'AAG': ['AGG','CGC','CGA','CGT','AGA','CGC','GAA','GAG','CAG','CAA','TCT','TCA','TCG', 'TCC', 'AGT', 'AGG'],
        'GAT': ['AAC','AAT','GAA','GAG','TCT','TCA','TCG', 'TCC', 'AGT', 'AGG','CAG','CAA'],
        'GAC': ['AAC','AAT','GAA','GAG','TCT','TCA','TCG', 'TCC', 'AGT', 'AGG','CAG','CAA'],
        'GAA': ['AAA','AAG','GCT','GCC','GCA','GCG','AAC','AAT','TCT','TCA','TCG', 'TCC', 'AGT', 'AGG'],
        'GAG': ['AAA','AAG','GCT','GCC','GCA','GCG','AAC','AAT','TCT','TCA','TCG', 'TCC', 'AGT', 'AGG'],
        'TGT': ['GCT','GCC','GCA','GCG','ATC','ATA','ATT','TTG','TTA','CTC','CTG', 'CTA','CTT','TTT','TTC'],
        'TGC': ['GCT','GCC','GCA','GCG','ATC','ATA','ATT','TTG','TTA','CTC','CTG', 'CTA','CTT','TTT','TTC'],
        'TGG': ['TAT','TAC','TTT','TTC','ACC','ACT','ACA','ACG','CAT','CAC'],
        'CGT': ['AAA','AAG','CAG','CAA','CAT','CAC','GAA','GAG'],
        'CGC': ['AAA','AAG','CAG','CAA','CAT','CAC','GAA','GAG'],
        'CGA': ['AAA','AAG','CAG','CAA','CAT','CAC','GAA','GAG'],
        'CGG': ['AAA','AAG','CAG','CAA','CAT','CAC','GAA','GAG'],
        'AGA': ['AAA','AAG','CAG','CAA','CAT','CAC','GAA','GAG'],
        'AGG': ['AAA','AAG','CAG','CAA','CAT','CAC','GAA','GAG'],
        'AGT': ['ACC','ACT','ACA','ACG', 'GCT','GCC','GCA','GCG','AAC','AAT','GAC','GAT'],
        'AGG': ['ACC','ACT','ACA','ACG', 'GCT','GCC','GCA','GCG','AAC','AAT','GAC','GAT'],
        'GGT': ['GCT','GCC','GCA','GCG','AAC','AAT','TCT','TCA','TCG', 'TCC', 'AGT', 'AGG','GAC','GAT'],
        'GGC': ['GCT','GCC','GCA','GCG','AAC','AAT','TCT','TCA','TCG', 'TCC', 'AGT', 'AGG','GAC','GAT'],
        'GGA': ['GCT','GCC','GCA','GCG','AAC','AAT','TCT','TCA','TCG', 'TCC', 'AGT', 'AGG','GAC','GAT'],
        'GGG': ['GCT','GCC','GCA','GCG','AAC','AAT','TCT','TCA','TCG', 'TCC', 'AGT', 'AGG','GAC','GAT'],
        'ATG': ['TTG','TTA','CTC','CTG', 'CTA','CTT','GTC','GTA','GTG', 'GTT','ATC','ATA','ATT','CAG','CAA']
}

SynonymousCodons = {
        'TGT': ['TGC'],
        'TGC': ['TGT'],
        'GAC': ['GAT'],
        'GAT': ['GAC'],
        'TCT': ['TCG', 'TCA', 'TCC', 'AGC', 'AGT'],
        'TCG': ['TCT', 'TCA', 'TCC', 'AGC', 'AGT'],
        'TCA': ['TCT', 'TCG', 'TCC', 'AGC', 'AGT'],
        'TCC': ['TCT', 'TCG', 'TCA', 'AGC', 'AGT'],
        'AGC': ['TCT', 'TCG', 'TCA', 'TCC', 'AGT'],
        'AGT': ['TCT', 'TCG', 'TCA', 'TCC', 'AGC'],
        'CAA': ['CAG'],
        'CAG': ['CAA'],
        'ATG': [],
        'AAC': ['AAT'],
        'AAT': ['AAC'],
        'CCT': ['CCG', 'CCA', 'CCC'],
        'CCG': ['CCT', 'CCA', 'CCC'],
        'CCA': ['CCT', 'CCG', 'CCC'],
        'CCC': ['CCT', 'CCG', 'CCA'],
        'AAG': ['AAA'],
        'AAA': ['AAG'],
        'TAG': ['TGA', 'TAA'],
        'TGA': ['TAG', 'TAA'],
        'TAA': ['TAG', 'TGA'],
        'ACC': ['ACA', 'ACG', 'ACT'],
        'ACA': ['ACC', 'ACG', 'ACT'],
        'ACG': ['ACC', 'ACA', 'ACT'],
        'ACT': ['ACC', 'ACA', 'ACG'],
        'TTC': ['TTT'],
        'TTT': ['TTC'],
        'GCA': ['GCC', 'GCG', 'GCT'],
        'GCC': ['GCA', 'GCG', 'GCT'],
        'GCG': ['GCA', 'GCC', 'GCT'],
        'GCT': ['GCA', 'GCC', 'GCG'],
        'GGT': ['GGC', 'GGG', 'GGA'],
        'GGG': ['GGC', 'GGT', 'GGA'],
        'GGA': ['GGC', 'GGT', 'GGG'],
        'GGC': ['GGT', 'GGG', 'GGA'],
        'ATC': ['ATT', 'ATA'],
        'ATA': ['ATC', 'ATT'],
        'ATT': ['ATC', 'ATA'],
        'TTA': ['TTG', 'CTC', 'CTT', 'CTG', 'CTA'],
        'TTG': ['TTA', 'CTC', 'CTT', 'CTG', 'CTA'],
        'CTC': ['TTA', 'TTG', 'CTT', 'CTG', 'CTA'],
        'CTT': ['TTA', 'TTG', 'CTC', 'CTG', 'CTA'],
        'CTG': ['TTA', 'TTG', 'CTC', 'CTT', 'CTA'],
        'CTA': ['TTA', 'TTG', 'CTC', 'CTT', 'CTG'],
        'CAC': ['CAT'],
        'CAT': ['CAC'],
        'CGA': ['CGT', 'CGC', 'CGG', 'AGA', 'AGG'],
        'CGC': ['CGT', 'CGG', 'CGA', 'AGA', 'AGG'],
        'CGG': ['CGT', 'CGC', 'CGA', 'AGA', 'AGG'],
        'CGT': ['CGC', 'CGG', 'CGA', 'AGA', 'AGG'],
        'AGG': ['CGT', 'CGC', 'CGG', 'CGA', 'AGA'],
        'AGA': ['CGT', 'CGC', 'CGG', 'CGA', 'AGG'],
        'TGG': [],
        'GTA': ['GTC', 'GTG', 'GTT'],
        'GTC': ['GTA', 'GTG', 'GTT'],
        'GTG': ['GTA', 'GTC', 'GTT'],
        'GTT': ['GTA', 'GTC', 'GTG'],
        'GAG': ['GAA'],
        'GAA': ['GAG'],
        'TAC': ['TAT'],
        'TAT': ['TAC']
}

CodonUsage = {
        'GGG': 10.99,
        'GGA': 7.92,
        'GGT': 24.85,
        'GGC': 29.44,
        'GAG': 17.79,
        'GAA': 39.58,
        'GAT': 32.22,
        'GAC': 19.05,
        'GTG': 26.25,
        'GTA': 10.88,
        'GTT': 18.38,
        'GTC': 15.22,
        'GCG': 33.66,
        'GCA': 20.28,
        'GCT': 15.34,
        'GCC': 25.51,
        'AGG': 1.22,
        'AGA': 2.05,
        'CGG': 5.38,
        'CGA': 3.53,
        'CGT': 21.02,
        'CGC': 22.02,
        'AAG': 10.21,
        'AAA': 33.62,
        'AAT': 17.62,
        'AAC': 21.67,
        'ATG': 27.77,
        'ATA': 4.28,
        'ATT': 30.40,
        'ATC': 25.00,
        'ACG': 14.37,
        'ACA': 7.02,
        'ACT': 8.92,
        'ACC': 23.38,
        'TGG': 15.31,
        'TGT': 5.18,
        'TGC': 6.44,
        'TAG': 0.23,
        'TAA': 2.02,
        'TGA': 0.90,
        'TAT': 16.32,
        'TAC': 12.27,
        'TTT': 22.40,
        'TTC': 16.59,
        'AGT': 8.71,
        'AGC': 16.03,
        'TCG': 8.92,
        'TCA': 7.13,
        'TCT': 8.50,
        'TCC': 8.59,
        'CAG': 28.84,
        'CAA': 15.45,
        'CAT': 12.90,
        'CAC': 9.72,
        'TTG': 13.72,
        'TTA': 13.89,
        'CTG': 52.82,
        'CTA': 3.85,
        'CTT': 11.04,
        'CTC': 11.04,
        'CCG': 23.27,
        'CCA': 8.52,
        'CCT': 7.04,
        'CCC': 5.52,
}

def compute_score2(x):
    return sum([1+(8.-CodonUsage[c])/8. for c in x if (CodonUsage[c]<=8.)]) 

def smartcodonproduct(*args):
    pools=list(map(tuple,args))
    result=[[]]
    position=[[]]
    for pool in pools:
        result=[x+[y] for x in result for y in pool]
        position=[i+[j] for i in position for (j,y) in enumerate(pool)]
    score1=[max(x)+sum(x) for x in position]
    score2=[compute_score2(x) for x in result]
    combination=list(zip(score2,result))
    s=sorted(combination,key=lambda x: x[0])
    return s
    #sortedresults=[x[1] for x in s]
    #sortedscores=[x[0] for x in s]
    #return (sortedresults,sortedscores)


mfsc=dict() # Most Frequent Synonymous Codon
for codon in CodonUsage:
    if len(SynonymousCodons[codon])==0:
        mfsc[codon]=codon
        continue
    candidate=max(SynonymousCodons[codon],key=lambda sc: CodonUsage[sc])
    if CodonUsage[candidate]<8.0 and CodonUsage[codon]>CodonUsage[candidate]:
        mfsc[codon]=codon
    else:
        mfsc[codon]=candidate
